<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>js on levi</title>
    <link>http://www.example.com/tags/js/</link>
    <description>Recent content in js on levi</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Thu, 16 Dec 2021 13:25:18 +0800</lastBuildDate><atom:link href="http://www.example.com/tags/js/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>JS基础汇总</title>
      <link>http://www.example.com/posts/js%E5%9F%BA%E7%A1%80%E6%B1%87%E6%80%BB/</link>
      <pubDate>Thu, 16 Dec 2021 13:25:18 +0800</pubDate>
      
      <guid>http://www.example.com/posts/js%E5%9F%BA%E7%A1%80%E6%B1%87%E6%80%BB/</guid>
      <description>&lt;h4 id=&#34;01--02-为什么不等于-03&#34;&gt;
  0.1 + 0.2 为什么不等于 0.3
  &lt;a class=&#34;heading-link&#34; href=&#34;#01--02-%e4%b8%ba%e4%bb%80%e4%b9%88%e4%b8%8d%e7%ad%89%e4%ba%8e-03&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://segmentfault.com/a/1190000012175422&#34;&gt;为什么0.1+0.2不等于0.3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/363133848&#34;&gt;非科班前端人的一道送命题：0.1+0.2 等于 0.3 吗？&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;现在浏览器多数采用双精度即64存储浮点数
&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第1位： 符号位，正数0，负数1&lt;/li&gt;
&lt;li&gt;2-11位： 指数位阶数+偏移量，阶数是：2^e-1 - 1&lt;/li&gt;
&lt;li&gt;12-64: 小数位， 即二进制小数点后面的数&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;0.1+0.2 不等于 0.3 ，因为在 0.1+0.2 的计算过程中发生了两次精度丢失。第一次是在 0.1 和 0.2 转成双精度二进制浮点数时，由于二进制浮点数的小数位只能存储52位，导致小数点后第53位的数要进行为1则进1为0则舍去的操作，从而造成一次精度丢失。第二次在 0.1 和 0.2 转成二进制浮点数后，二进制浮点数相加的过程中，小数位相加导致小数位多出了一位，又要让第53位的数进行为1则进1为0则舍去的操作，又造成一次精度丢失。最终导致 0.1+0.2 不等于0.3 。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;解决&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;toFixed var c = 0.1 + 0.2; c.toFixed(2) === &amp;ldquo;0.30&amp;rdquo;， 在做Number转换&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>ByteDance八股文</title>
      <link>http://www.example.com/posts/bytedance%E5%85%AB%E8%82%A1%E6%96%87/</link>
      <pubDate>Thu, 16 Dec 2021 13:22:12 +0800</pubDate>
      
      <guid>http://www.example.com/posts/bytedance%E5%85%AB%E8%82%A1%E6%96%87/</guid>
      <description>&lt;p&gt;字节面经总结&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>单点登录</title>
      <link>http://www.example.com/posts/%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95/</link>
      <pubDate>Thu, 16 Dec 2021 13:21:22 +0800</pubDate>
      
      <guid>http://www.example.com/posts/%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95/</guid>
      <description>&lt;h4 id=&#34;1同域-sso&#34;&gt;
  1.同域 SSO
  &lt;a class=&#34;heading-link&#34; href=&#34;#1%e5%90%8c%e5%9f%9f-sso&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;如图，同域 SSO 是最简单的一种情况。&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;此时，两个产品都是在一个域名下，单点登录是很自然的选择。我们来捋一捋步骤，搞清楚这里的步骤是理解后文的基础，千万不要跳过。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用户访问产品 a，向 后台服务器发送登录请求。&lt;/li&gt;
&lt;li&gt;登录认证成功，服务器把用户的登录信息写入 session。服务器为该用户生成一个 cookie，并加入到 response header 中，随着请求返回而写入浏览器。该 cookie 的域设定为 dxy.cn。&lt;/li&gt;
&lt;li&gt;下一次，当用户访问同域名的产品 b 时，由于 a 和 b 在同一域名下，也是 dxy.cn，浏览器会自动带上之前的 cookie。此时后台服务器就可以通过该 cookie 来验证登录状态了。&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>routerv5源码探析前端路由本质</title>
      <link>http://www.example.com/posts/routerv5%E6%BA%90%E7%A0%81%E6%8E%A2%E6%9E%90%E5%89%8D%E7%AB%AF%E8%B7%AF%E7%94%B1%E6%9C%AC%E8%B4%A8/</link>
      <pubDate>Thu, 16 Dec 2021 13:18:14 +0800</pubDate>
      
      <guid>http://www.example.com/posts/routerv5%E6%BA%90%E7%A0%81%E6%8E%A2%E6%9E%90%E5%89%8D%E7%AB%AF%E8%B7%AF%E7%94%B1%E6%9C%AC%E8%B4%A8/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;
  前言
  &lt;a class=&#34;heading-link&#34; href=&#34;#%e5%89%8d%e8%a8%80&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h2&gt;
&lt;h3 id=&#34;什么是前端路由&#34;&gt;
  什么是前端路由
  &lt;a class=&#34;heading-link&#34; href=&#34;#%e4%bb%80%e4%b9%88%e6%98%af%e5%89%8d%e7%ab%af%e8%b7%af%e7%94%b1&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;首先，路由的概念开始是后端提出来的，用来跟服务器进行数据/资源获取的一种方式，通过不同的路径，来获取不同的资源
前端随着ajax(不刷新页面情况下请求数据)的流行，推动着异步交互体验提升，随后spa&amp;lt;单页面应用程序&amp;gt;在前端领域大放异彩&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;spa: 单页面应用程序不仅在页面内交互是无刷新的，连页面之间的跳转也没有刷新。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;spa核心思想&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;监听url变化&lt;/li&gt;
&lt;li&gt;改变context的值&lt;/li&gt;
&lt;li&gt;匹配相对应的组件&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;实现前端路由应该包括哪些功能&#34;&gt;
  实现前端路由应该包括哪些功能
  &lt;a class=&#34;heading-link&#34; href=&#34;#%e5%ae%9e%e7%8e%b0%e5%89%8d%e7%ab%af%e8%b7%af%e7%94%b1%e5%ba%94%e8%af%a5%e5%8c%85%e6%8b%ac%e5%93%aa%e4%ba%9b%e5%8a%9f%e8%83%bd&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;前端可以自己维护和控制浏览器的history&amp;lt;历史记录&amp;gt;。我们称之为history栈， 保证浏览器在url改变的时候不会刷新页面。并且通过history栈控制浏览器页面的前进和后退&lt;/p&gt;
&lt;p&gt;目前 Router有两种实现方式  hash 和 History&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;...
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
  </channel>
</rss>
